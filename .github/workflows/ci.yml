name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'release/**' ]
  pull_request:
    branches: [ main, develop ]

# Cancel in-progress runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Linting and Code Quality
  lint:
    name: Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort mypy

      - name: Run Black (code formatting check)
        run: |
          black --check --diff src/ tests/ *.py || {
            echo "❌ Code formatting issues found"
            echo "Fix with: black src/ tests/ *.py"
            exit 1
          }
        continue-on-error: false

      - name: Run isort (import sorting check)
        run: |
          isort --check-only --diff src/ tests/ *.py || {
            echo "❌ Import sorting issues found"
            echo "Fix with: isort src/ tests/ *.py"
            exit 1
          }
        continue-on-error: false

      - name: Run Flake8 (style guide enforcement)
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src/ tests/ *.py --count --select=E9,F63,F7,F82 --show-source --statistics

          # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
          flake8 src/ tests/ *.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Pylint (code analysis)
        run: |
          pylint src/ tests/ *.py --exit-zero --max-line-length=127 \
            --disable=C0111,C0103,R0903 \
            --output-format=colorized \
            || echo "⚠️  Pylint found issues but not failing build"

      - name: Run mypy (type checking)
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional || echo "⚠️  Type hints issues found"
        continue-on-error: true

  # Job 2: Unit Tests
  test:
    name: Test (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist

      - name: Run tests with coverage
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=80 \
            -n auto
        continue-on-error: false

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false

  # Job 3: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit (security linter)
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f screen

      - name: Run Safety (dependency vulnerability check)
        run: |
          pip freeze | safety check --stdin || echo "⚠️  Vulnerability check completed"
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: security-reports
          path: bandit-report.json

  # Job 4: Integration Tests (if Activity Log exists)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run integration tests
        run: |
          # Run activity log tests if they exist
          if [ -f "test_activity_log.py" ]; then
            pytest test_activity_log.py -v
          fi

          # Run other integration tests
          if [ -d "tests/integration" ]; then
            pytest tests/integration/ -v
          fi

  # Job 5: Build Check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          # Create minimal setup.py if doesn't exist
          if [ ! -f "setup.py" ]; then
            echo "Skipping package build (no setup.py)"
          else
            python -m build
            twine check dist/*
          fi

  # Job 6: Merge Readiness Check
  merge-ready:
    name: Merge Readiness
    runs-on: ubuntu-latest
    needs: [lint, test, security, integration, build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR title format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|perf)(\(.+\))?:.+ ]]; then
            echo "❌ PR title must follow conventional commits format"
            echo "Examples: feat: add feature, fix(auth): resolve bug"
            exit 1
          fi
          echo "✓ PR title follows conventional commits format"

      - name: Check for merge conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q "^+<<<<<<<"; then
            echo "❌ Merge conflicts detected"
            exit 1
          fi
          echo "✓ No merge conflicts"

      - name: Check branch is up to date
        run: |
          git fetch origin ${{ github.base_ref }}
          BEHIND=$(git rev-list --count HEAD..origin/${{ github.base_ref }})
          if [ "$BEHIND" -gt 5 ]; then
            echo "⚠️  Branch is $BEHIND commits behind ${{ github.base_ref }}"
            echo "Consider rebasing: git rebase origin/${{ github.base_ref }}"
          else
            echo "✓ Branch is up to date"
          fi

      - name: All checks passed
        run: |
          echo "✅ All CI checks passed!"
          echo "PR is ready for review and merge"

  # Job 7: Performance Benchmarks (optional)
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark

      - name: Run benchmarks
        run: |
          echo "⏱️  Running performance benchmarks..."
          # Add benchmark tests when available
          echo "No benchmarks configured yet"
        continue-on-error: true

# Workflow summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, security, integration, build]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ **All required checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some checks failed. Please review above.**" >> $GITHUB_STEP_SUMMARY
          fi
